{"version":3,"sources":["components/MovieCard.js","components/NominatedMovies.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","movie","nominate","useState","review","setReview","className","Title","Rated","Plot","src","Poster","alt","title","style","height","width","initialRating","onChange","newRating","console","log","type","value","e","target","onClick","NominatedMovies","movies","length","map","i","App","nMovies","setNMovies","search","setSearch","setMovie","visible","setModalVisible","searchMovie","fetch","apiKey","then","response","json","concat","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAIe,SAASA,EAAT,GAAuC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SAAW,EAErBC,mBAAS,IAFY,mBAE1CC,EAF0C,KAElCC,EAFkC,KAMjD,OACI,sBAAKC,UAAU,QAAf,UACI,oBAAIA,UAAU,SAAd,SAAwBL,EAAMM,QAC9B,oBAAID,UAAU,UAAd,SAAyBL,EAAMO,QAC/B,oBAAGF,UAAU,eAAb,cAA8BL,EAAMQ,QACpC,qBAAKH,UAAU,UAAUI,IAAKT,EAAMU,OAAQC,IAAKX,EAAMY,MAAOC,MAAQ,CAACC,OAAQ,QACzFC,MAAM,WACI,4CACA,sBAAKV,UAAU,SAAf,UACI,cAAC,IAAD,CACAW,cAAc,IACdC,SAdM,SAACC,GACfC,QAAQC,IAAIF,MAiBJ,wBAAOb,UAAU,QAAjB,oBAEI,uBACAA,UAAU,cACVgB,KAAK,OACLC,MAAOnB,EACPc,SAAU,SAACM,GACPnB,EAAUmB,EAAEC,OAAOF,gBAM/B,wBAAQjB,UAAU,UAAUoB,QAAS,kBAAMxB,EAASD,IAApD,0BCpCG,SAAS0B,EAAT,GAAoC,IAAVC,EAAS,EAATA,OAAS,EAGhBzB,oBAAS,GAHO,6BAsB9C,OACI,gCAPIyB,EAAOC,OAAS,EAAW,GAElB,4BAdE,qCAqBX,oBAAIvB,UAAU,mBAAd,UAlBJc,QAAQC,IAAIO,GAEDA,EAAOE,KAAI,SAAA7B,GACd,OAAO,6BAAgBA,EAAMM,OAAbwB,YCsDjBC,MA5Df,WAAgB,IAAD,EAGe7B,mBAAS,IAHxB,mBAGR8B,EAHQ,KAGCC,EAHD,OAIa/B,mBAAS,IAJtB,mBAIRgC,EAJQ,KAIAC,EAJA,OAKWjC,mBAAS,IALpB,mBAKRF,EALQ,KAKDoC,EALC,OAMoBlC,oBAAS,GAN7B,mBAMRmC,EANQ,KAMCC,EAND,KAcTC,EAAc,WAClBpB,QAAQC,IAAI,QACVoB,MAAM,8BAAD,OAA+BN,EAA/B,mBAAgDO,EAAhD,uBACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA1C,GAAK,OAAIoC,EAASpC,OAItByC,EAAS,WACb,OAEA,gCACM,sBAAKpC,UAAU,SAAf,UACE,wBAAOA,UAAU,QAAjB,mBAEI,uBACAgB,KAAK,OACLC,MAAOY,EACPjB,SAAU,SAACM,GACPY,EAAUZ,EAAEC,OAAOF,OAClBiB,UAKT,uBAAOlB,KAAK,SAASC,MAAM,SAASG,QAASc,OAIjD,qBAAKlC,UAAU,aAAf,SACE,cAACN,EAAD,CAAWC,MAAOA,EAAOC,SApCX,SAACD,GACrBmB,QAAQC,IAAI,QACZkB,GAAiBD,GACbL,EAAQJ,OAAS,GAAIK,GAAW,SAAAD,GAAO,OAAIA,EAAQa,OAAO7C,WAoC1D,qBAAKK,UAAU,aAAf,SACA,cAACqB,EAAD,CAAiBC,OAAQK,UC1ChBc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9354252c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport Rating from 'react-rating'\n\n\nexport default function MovieCard({movie, nominate}) {\n    \n    const [review, setReview] = useState('')\n    const getRating = (newRating) => {\n        console.log(newRating)\n    }\n    return (\n        <div className=\"Mcard\"> \n            <h1 className=\"Mtitle\">{movie.Title}</h1>\n            <h2 className=\"Mrating\">{movie.Rated}</h2>\n            <p className=\"Mdescription\"> {movie.Plot}</p>\n            <img className=\"Mposter\" src={movie.Poster} alt={movie.title} style={ {height: '120px',\n  width:'100px'}}/>\n            <p>Add Review?</p>\n            <div className=\"review\">\n                <Rating\n                initialRating=\"0\"\n                onChange={getRating}\n                //     emptySymbol={<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Empty_Star.svg/1024px-Empty_Star.svg.png\" alt=\"empty-star\" className=\"icon\" />}\n                //     fullSymbol={<img src=\"../images/star-full.png\" alt=\"full-star\" className=\"icon\" />}\n                />\n                <label className=\"label\">\n                Review:\n                    <input\n                    className=\"review-text\"\n                    type=\"text\" \n                    value={review}\n                    onChange={(e) => {\n                        setReview(e.target.value) \n                            }\n                        }\n                    />\n                </label>\n          </div>\n            <button className=\"Nbutton\" onClick={() => nominate(movie)}>Nominate?</button>\n        </div>\n    )\n}","import React, { useState } from 'react'\n\nexport default function NominatedMovies({movies}) {\n\n    let i = 0\n    const [message, setMessage] = useState(true)\n    const endMessage = \"You have nominated all 5 movies!\"\n\n    function renderNominatedMovies(){\n        console.log(movies)\n \n            return movies.map(movie => {\n                return <li key={i +1}>{movie.Title}</li>\n                })\n            \n    \n    }\n    function renderMessage (){\n        if (movies.length < 5) {return \"\"}\n        else {\n             {return <p>{endMessage}</p>}\n        }\n        }\n\n    return (\n        <div >\n            {renderMessage()}\n            <ul className=\"nominated-movies\">\n                \n            {renderNominatedMovies()}\n            </ul>\n        </div>\n    )\n}\n","\nimport { useState } from 'react';\nimport './App.css';\nimport MovieCard from './components/MovieCard.js'\nimport NominatedMovies from './components/NominatedMovies.js'\n\nfunction App() {\n  \n\nconst [nMovies, setNMovies] = useState([]) \nconst [search, setSearch] = useState('')\nconst [movie, setMovie] = useState('')\nconst [visible, setModalVisible] = useState(false)\n\nconst nominateMovie = (movie) => {\n  console.log(\"done\")\n  setModalVisible(!visible)\n  if (nMovies.length < 5) {setNMovies(nMovies => nMovies.concat(movie))}\n}\n\nconst searchMovie = () => {\n  console.log('done')\n    fetch(`https://www.omdbapi.com/?t=${search}&apikey=${apiKey}&type=movie&r=json`)\n    .then(response => response.json())\n    .then(movie => setMovie(movie))\n\n}\n\nconst apiKey = \"be23069c\"\n  return (\n   \n  <div>\n        <div className=\"Search\">  \n          <label className=\"label\">\n              Movie:\n              <input \n              type=\"text\" \n              value={search} \n              onChange={(e) => {\n                  setSearch(e.target.value); \n                  {searchMovie()}\n                    } \n                  }\n                />\n            </label>\n          <input type=\"submit\" value=\"Submit\" onClick={searchMovie} />\n        \n          </div >\n        \n      <div className=\"Mcontainer\">\n        <MovieCard movie={movie} nominate={nominateMovie}/>\n      </div>\n      \n      <div className=\"Ncontainer\">\n      <NominatedMovies movies={nMovies} />\n      </div>\n  </div>\n  \n    \n  \n\n  );\n\n  \n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}